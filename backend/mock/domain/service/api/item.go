// Code generated by MockGen. DO NOT EDIT.
// Source: domain/service/api/item.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/yoshiyoshiharu/item-throw-ways/infrastructure/entity"
)

// MockItemService is a mock of ItemService interface.
type MockItemService struct {
	ctrl     *gomock.Controller
	recorder *MockItemServiceMockRecorder
}

// MockItemServiceMockRecorder is the mock recorder for MockItemService.
type MockItemServiceMockRecorder struct {
	mock *MockItemService
}

// NewMockItemService creates a new mock instance.
func NewMockItemService(ctrl *gomock.Controller) *MockItemService {
	mock := &MockItemService{ctrl: ctrl}
	mock.recorder = &MockItemServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemService) EXPECT() *MockItemServiceMockRecorder {
	return m.recorder
}

// DeleteAndInsertAll mocks base method.
func (m *MockItemService) DeleteAndInsertAll(arg0 []entity.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAndInsertAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAndInsertAll indicates an expected call of DeleteAndInsertAll.
func (mr *MockItemServiceMockRecorder) DeleteAndInsertAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAndInsertAll", reflect.TypeOf((*MockItemService)(nil).DeleteAndInsertAll), arg0)
}

// FindAll mocks base method.
func (m *MockItemService) FindAll() []*entity.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]*entity.Item)
	return ret0
}

// FindAll indicates an expected call of FindAll.
func (mr *MockItemServiceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockItemService)(nil).FindAll))
}
